{"version":3,"sources":["webpack:///./src/templates/listing.jsx","webpack:///./src/components/PostListing.jsx"],"names":["props","currentPageNum","pageCount","prevPage","nextPage","isFirstPage","isLastPage","postEdges","data","allMarkdownRemark","edges","className","title","config","siteTitle","pageContext","to","Array","map","_val","index","pageNum","key","listingQuery","postList","forEach","postEdge","push","path","node","fields","slug","tags","frontmatter","date","excerpt","timeToRead","post"],"mappings":"sjCAQe,mBAACA,GACf,IAA2B,EAClBC,EAAgBC,EACvBC,EACAC,EACAC,EACAC,EAkBIC,EAAYP,EAAMQ,KAAKC,kBAAkBC,MAE/C,OACC,kBAAC,IAAD,KACC,yBAAKC,UAAU,qBACd,yBAAKA,UAAU,mBACd,kBAAC,IAAD,CAAQC,MAAOC,IAAOC,YACtB,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAaP,UAAWA,MA/BD,EACYP,EAAMe,YAApCd,EADkB,EAClBA,eAAgBC,EADE,EACFA,UACvBC,EAAWF,EAAiB,GAAM,EAAI,IAA3B,KAAqCA,EAAiB,GAAtD,IACXG,EAHyB,KAGVH,EAAiB,GAHP,IAIzBI,EAAiC,IAAnBJ,EACdK,EAAaL,IAAmBC,EAGhC,yBAAKS,UAAU,qBACZN,GAAe,kBAAC,OAAD,CAAMW,GAAIb,GAAV,YAChB,EAAIc,MAAMf,IAAYgB,KAAI,SAACC,EAAMC,GACjC,IAAMC,EAAUD,EAAQ,EACxB,OACC,kBAAC,OAAD,CAAME,IAAG,gBAAkBD,EAAWL,GAAgB,IAAZK,EAAgB,IAAhB,IAA0BA,EAA1B,KACxCA,OAIFf,GAAc,kBAAC,OAAD,CAAMU,GAAIZ,GAAV,aAsBb,IAAMmB,EAAY,c,kCCjDzB,qCAGe,aAACvB,GACf,IACOwB,EAgBP,OACC,8BAjBMA,EAAW,GACjBxB,EAAMO,UAAUkB,SAAQ,SAACC,GAExBF,EAASG,KAAK,CACbC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BC,KAAMN,EAASG,KAAKI,YAAYD,KAEhCpB,MAAOc,EAASG,KAAKI,YAAYrB,MACjCsB,KAAMR,EAASG,KAAKC,OAAOI,KAC3BC,QAAST,EAASG,KAAKM,QACvBC,WAAYV,EAASG,KAAKO,gBAGrBZ,GAOSN,KAAI,SAACmB,GAAD,OACjB,kBAAC,OAAD,CAAMrB,GAAIqB,EAAKT,KAAMN,IAAKe,EAAKzB,OAC9B,4BAAKyB,EAAKzB","file":"component---src-templates-listing-jsx-6c3cbc9eb92ac62d17c5.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { graphql, Link } from 'gatsby';\nimport Layout from '../layout';\nimport PostListing from '../components/PostListing';\nimport SEO from '../components/SEO';\nimport config from '../../data/SiteConfig';\n\nexport default (props) => {\n\tconst renderPaging = () => {\n\t\tconst { currentPageNum, pageCount } = props.pageContext,\n\t\t\tprevPage = currentPageNum - 1 === 1 ? '/' : `/${currentPageNum - 1}/`,\n\t\t\tnextPage = `/${currentPageNum + 1}/`,\n\t\t\tisFirstPage = currentPageNum === 1,\n\t\t\tisLastPage = currentPageNum === pageCount;\n\n\t\treturn (\n\t\t\t<div className=\"paging-container\">\n\t\t\t\t{!isFirstPage && <Link to={prevPage}>Previous</Link>}\n\t\t\t\t{[...Array(pageCount)].map((_val, index) => {\n\t\t\t\t\tconst pageNum = index + 1;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Link key={`listing-page-${pageNum}`} to={pageNum === 1 ? '/' : `/${pageNum}/`}>\n\t\t\t\t\t\t\t{pageNum}\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t\t{!isLastPage && <Link to={nextPage}>Next</Link>}\n\t\t\t</div>\n\t\t);\n\t};\n\n\tconst postEdges = props.data.allMarkdownRemark.edges;\n\n\treturn (\n\t\t<Layout>\n\t\t\t<div className=\"listing-container\">\n\t\t\t\t<div className=\"posts-container\">\n\t\t\t\t\t<Helmet title={config.siteTitle} />\n\t\t\t\t\t<SEO />\n\t\t\t\t\t<PostListing postEdges={postEdges} />\n\t\t\t\t</div>\n\t\t\t\t{renderPaging()}\n\t\t\t</div>\n\t\t</Layout>\n\t);\n};\n\n/* eslint no-undef: \"off\" */\nexport const listingQuery = graphql`\n\tquery ListingQuery($skip: Int!, $limit: Int!) {\n\t\tallMarkdownRemark(sort: { fields: [fields___date], order: DESC }, limit: $limit, skip: $skip) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tfields {\n\t\t\t\t\t\tslug\n\t\t\t\t\t\tdate\n\t\t\t\t\t}\n\t\t\t\t\texcerpt\n\t\t\t\t\ttimeToRead\n\t\t\t\t\tfrontmatter {\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\ttags\n\t\t\t\t\t\t# cover\n\t\t\t\t\t\tdate\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n`;\n","import React from 'react';\nimport { Link } from 'gatsby';\n\nexport default (props) => {\n\tconst getPostList = () => {\n\t\tconst postList = [];\n\t\tprops.postEdges.forEach((postEdge) => {\n\t\t\t//TODO: we need to find what articles we need\n\t\t\tpostList.push({\n\t\t\t\tpath: postEdge.node.fields.slug,\n\t\t\t\ttags: postEdge.node.frontmatter.tags,\n\t\t\t\t// cover: postEdge.node.frontmatter.cover,\n\t\t\t\ttitle: postEdge.node.frontmatter.title,\n\t\t\t\tdate: postEdge.node.fields.date,\n\t\t\t\texcerpt: postEdge.node.excerpt,\n\t\t\t\ttimeToRead: postEdge.node.timeToRead\n\t\t\t});\n\t\t});\n\t\treturn postList;\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t\t\t/* Your post list here. */\n\t\t\t\tgetPostList().map((post) => (\n\t\t\t\t\t<Link to={post.path} key={post.title}>\n\t\t\t\t\t\t<h1>{post.title}</h1>\n\t\t\t\t\t</Link>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t);\n};\n"],"sourceRoot":""}